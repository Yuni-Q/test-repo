name: pull request

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - "**"

jobs:
  docker:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:
      # 해당 저장소의 코드를 가져옵니다.
      - name: Checkout
        uses: actions/checkout@v2

      # # docker-compose를 활용해 테스트를 위한 컨테이너 환경을 구성합니다.
      # - name: Start containers
      #   run: docker-compose -f "docker-compose.yml" up -d --build

      # Node 16 버전을 사용합니다.
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'

      # 설치된 yarn을 통해 패키지를 설치합니다.
      - name: Install dependencies
        run: npm install

      # 테스트 수행과 그 테스트 결과를 xml파일로 생성합니다.
      - name: Run tests
        run: npm test:report

      # 테스트 결과를 담은 xml 파일을 레포트로 변환합니다.
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: test-results
          path: junit.xml
          fail-on-error: 'false'
          reporter: jest-junit        # Format of test results
          token: ${{ secrets.GITHUB_TOKEN }}

      # # 앞의 작업이 실패/성공과 관계 없이 컨테이너들을 종료합니다.
      # - name: Stop containers
      #   if: always()
      #   run: docker-compose -f "docker-compose.yml" down
    # steps:
    #   - uses: 8398a7/action-slack@v3
    #     with:
    #     status: custom
    #     fields: workflow,job,commit,repo,ref,author,took
    #     custom_payload: |
    #       {
    #         attachments: [{
    #         color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
    #         text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
    #       }]
    #       }
    #     env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    #     if: always()
